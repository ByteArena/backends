// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package deathmatch

import (
	json "encoding/json"
	types "github.com/bytearena/bytearena/common/types"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson69d6c65dDecodeGithubComBytearenaBytearenaGameDeathmatch(in *jlexer.Lexer, out *agentSpecs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "maxspeed":
			out.MaxSpeed = float64(in.Float64())
		case "maxsteeringforce":
			out.MaxSteeringForce = float64(in.Float64())
		case "maxangularvelocity":
			out.MaxAngularVelocity = float64(in.Float64())
		case "visionradius":
			out.VisionRadius = float64(in.Float64())
		case "visionangle":
			out.VisionAngle = types.Angle(in.Float64())
		case "bodyradius":
			out.BodyRadius = float64(in.Float64())
		case "maxshootenergy":
			out.MaxShootEnergy = float64(in.Float64())
		case "shootcost":
			out.ShootCost = float64(in.Float64())
		case "shootrecoveryrate":
			out.ShootRecoveryRate = float64(in.Float64())
		case "shootcooldown":
			out.ShootCooldown = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69d6c65dEncodeGithubComBytearenaBytearenaGameDeathmatch(out *jwriter.Writer, in agentSpecs) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"maxspeed\":")
	out.Float64(float64(in.MaxSpeed))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"maxsteeringforce\":")
	out.Float64(float64(in.MaxSteeringForce))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"maxangularvelocity\":")
	out.Float64(float64(in.MaxAngularVelocity))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visionradius\":")
	out.Float64(float64(in.VisionRadius))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visionangle\":")
	out.Float64(float64(in.VisionAngle))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bodyradius\":")
	out.Float64(float64(in.BodyRadius))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"maxshootenergy\":")
	out.Float64(float64(in.MaxShootEnergy))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"shootcost\":")
	out.Float64(float64(in.ShootCost))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"shootrecoveryrate\":")
	out.Float64(float64(in.ShootRecoveryRate))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"shootcooldown\":")
	out.Int(int(in.ShootCooldown))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v agentSpecs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69d6c65dEncodeGithubComBytearenaBytearenaGameDeathmatch(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v agentSpecs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69d6c65dEncodeGithubComBytearenaBytearenaGameDeathmatch(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *agentSpecs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69d6c65dDecodeGithubComBytearenaBytearenaGameDeathmatch(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *agentSpecs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69d6c65dDecodeGithubComBytearenaBytearenaGameDeathmatch(l, v)
}
